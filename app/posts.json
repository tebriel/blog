[{"postText":"<h2><a href=\"#posts/anagram\">Anagram.py</a></h2>\n\n<p><em>March 22, 2013</em></p>\n\n<p>At PyCon &#39;13 many of the sponsors were offering up coding challenges as ways of\nengaging the community with them and some (google) as an opportunity to grab\npotential candidates. These challenges ranged from small one-liner puzzles to\nthe full blown challenge that my co-worker Philip and I did, Anagram.py.</p>\n\n<p>Anagram.py was created judged by <a href=\"http://thumbtack.com\">Thumbtack</a>. The prizes\nwere:</p>\n\n<ul>\n<li> A coffee mug and sunglasses for the simple challenge</li>\n<li> A beer mug and a shot glass for the bonus challenge</li>\n</ul>\n\n<p>This challenge was broken up into two parts, the first was to find the only\ntwo-word anagram pair in a given body of text. For example:</p>\n\n<p><em>Guido was HAPPY ONCE he solved Thumbtack&#39;s PYCON challenge and won a HEAP of\nprizes!</em></p>\n\n<p>In this sentence if you combine and re-arrange the letters in &#39;happy once&#39; you\ncan form &#39;PyCon heap&#39;.</p>\n\n<p>Rules for this part of the challenge:</p>\n\n<ul>\n<li> Read the text corpus from stdin and print the anagram pairs to stdout.</li>\n<li> Your solution must be case-insensitive -- mug and Gum are considered anagrams</li>\n<li> The words in each pair must not appear in the other pair.</li>\n<li> Treat all non-alphanumeric characters as whitespace - &quot;He&#39;s twenty-seven,\nand&quot; would be considered five words: he, s, twenty, seven, and.</li>\n<li> Ignore all words with fewer than four letters</li>\n</ul>\n\n<p>My solution to this first problem is on <a href=\"https://github.com/tebriel/anagramfinder/blob/master/anagram.py\">My GitHub</a>\nThe text given as a test for the first problem is located at: http://thumb.tk/8PYN</p>\n\n<p>This was fairly easy. My solution goes like this:</p>\n\n<ol>\n<li> split up all the words</li>\n<li> create all the unique combinations</li>\n<li> sort the letters in each combination</li>\n<li> store these &quot;hashes&quot; into a hashmap, combining those that have the same\nhash</li>\n<li> look for any hash that has multiple entries</li>\n<li> print out the result</li>\n</ol>\n\n<p>Python does a great job giving you almost any tool you could imagine needing\nand itertools has some great features. <code>itertools.combinations</code> is fantastic,\njust pass it a list and how many items you&#39;d like to have in each combination\nand it will return a generator which will <code>yield</code> a new combination each time\nit&#39;s called.</p>\n\n<p>The bonus solution was a bit harder, and had some extra rules.</p>\n\n<ul>\n<li> Make the anagram finder more general. Find the largest set(s) of disjoint\nword pairs that all anagram to each other in a given corpus.</li>\n<li> Alice in Wonderland contains two sets of 10 word-pairs, using the same rules\nas before. Can you find the sets?</li>\n</ul>\n\n<p>The real kicker here was that you needed to find disjoint word pairs. So you\ncouldn&#39;t have &#39;word mug&#39; and &#39;word gum&#39;. Even though those two are anagrams of\neach other, it reuses the word &#39;word&#39;, not acceptable. Note, there&#39;s a lot of\nthese non-disjoint word pairs in the text.</p>\n\n<p>My soultion to this bonus problem is on <a href=\"https://github.com/tebriel/anagramfinder/blob/master/anagram2.py\">My Github</a>\nThe URL for the entire Alice in Wonderland Text: http://thumb.tk/8Qd3</p>\n\n<p>This one started out the same as before, but this time a filtering step was\nneeded. Originally I did filtering during the anagram finding, but this proved\nto be quite slow and used about 1GB of memory during runtime. Philip and I\nspent a lot of our freetime at the conference finding ways to optimise the\ncode. I learned some new tricks this way, like that global lookups are\nexpensive, so on entry to a method with a large loop you can store the global\nfunction/variable in a local one you shave off about 0.5s from the runtime. </p>\n\n<p>Another optimisation that I tried (and had good success with) was PyPy. PyPy\ndoes JIT for Python, and I saw about a 2.0s speedup with it as opposed to\nstandard Python. Python 3.3 was also about 0.5s faster than Python 2.7.</p>\n\n<p>My initial runtime when I first solved this puzzle was 48s, with PyPy and the\nmany optimisations that I did, it now runs sub 10s and uses about 500MB of\nmemory. I&#39;d consider this a win. My next plan is to ignore speedup and instead\ndecrease the memory footprint with a goal of running it on the RaspberryPi that\neveryone got for attending PyCon. The currentl solution froze it and I had to\nhard reboot as it would not respond to any input.</p>\n\n<p>Many thanks to Thumbtack and the other sponsors of challenges at PyCon. It was\ndefinitely great fun and the prizes are all over the office here at\n<a href=\"http://www.endgame.com\">Endgame</a>.</p>\n\n<p>If you devise a faster solution, I&#39;d love to see it!</p>\n","postName":"anagram","postIndex":"1"},{"postText":"<h2><a href=\"#posts/marionette\">Backbone.Marionette</a></h2>\n\n<p><em>March 19, 2013</em></p>\n\n<p>Backbone is a fantastic technology for organizing data and composing views in an MVC Style Framework. It&#39;s not without its caveats though. There are things that could be easier/smoother and it would be nice if you could leverage Backbone more throughout your webapp.</p>\n\n<p><code>Backbone.Marionette</code> is a seemingly heavy-handed approach. It gives you controls to handle every part of the rendering/composing process. The source (non-minified) is more than two thousand lines, which is about 500 more than Backbone itself. For average webapps, this extra burden on the browser won&#39;t be an issue, but for things like my work at Endgame where I have a budget of 1ms per event ingested over the WebSocket it might be too much.</p>\n\n<p>Personally, I like this large amount of scaffolding/framework. It abstracts a lot of the things I normally have to manually and gives my app a clean, consistent feel across all of my views. For generic views I don&#39;t even need to implement the <code>render</code> method.</p>\n\n<p><strong>Backbone.Marionette.ItemView</strong> takes a function to compile the template. This can take the form of what you see here:  </p>\n\n<p><code>\ntemplate: (serialized_model) =&gt;\n    _.template @template_html, serialized_model\n</code></p>\n\n<p>This is (obviously) a simple example, but what Marionette does is pass in a serialized version of the model attribute of your view. This is just a Backbone Model&#39;s attributes value, but it&#39;s very nice as every value in your model is available for your template.</p>\n","postName":"marionette","postIndex":"0"}]